import random
from entities import Tree, Rock, Grass, Herbivore, Predator


GRAY = '\033[90m'
DARK_GRAY = '\033[30m'
RESET = '\033[0m'


ENTITY_SYMBOLS = {
    'Herbivore': 'ü¶ô',
    'Predator': 'üêÜ',
    'Grass': 'üåø',
    'Stone': '‚õ∞Ô∏è',
    'Tree': 'üå≥',
    'Empty': ' ',
}


class Simulation:
    """ –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
     - –ö–∞—Ä—Ç—É
     - –°—á—ë—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
     - –†–µ–Ω–¥–µ—Ä–µ—Ä –ø–æ–ª—è
     - Actions - —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö –ø–µ—Ä–µ–¥
     —Å—Ç–∞—Ä—Ç–æ–º —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–ª–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥—É"""
    def __init__(self):
        pass


class Actions:
    """ –î–µ–π—Å—Ç–≤–∏–µ, —Å–æ–≤–µ—Ä—à–∞–µ–º–æ–µ –Ω–∞–¥ –º–∏—Ä–æ–º.
     –ù–∞–ø—Ä–∏–º–µ—Ä - —Å—Ö–æ–¥–∏—Ç—å –≤—Å–µ–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ
     –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–ª–æ –±—ã —Å—É—â–µ—Å—Ç–≤ –∏ –≤—ã–∑–≤–∞–ª–æ –∫–∞–∂–¥–æ–º—É make_move().
     –ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
     –∏ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –∫–∞—Ä—Ç–æ–π.
     –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –º–∞—Å—Å–∏–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π:
     - init_actions - –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–µ—Ä—à–∞–µ–º—ã–µ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
     —Å–∏–º—É–ª—è—Ü–∏–∏;
     - turn_actions - –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–µ—Ä—à–∞–µ–º—ã–µ –∫–∞–∂–¥—ã–π —Ö–æ–¥.
     –ü—Ä–∏–º–µ—Ä—ã - –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤, –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–≤—ã –∏–ª–∏
     —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ"""
    pass


class Map:
    """ –ö–∞—Ä—Ç–∞ - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
     —Å—É—â–µ—Å—Ç–≤ –∏ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è. """
    def __init__(self):
        self.map_data = {}  # —Å–ª–æ–≤–∞—Ä—å: –∑–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–µ—Ç–∫–∞—Ö


    def map_data_information(self, map_size: int, count_objects: list):
        """ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è map_data –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏) """

        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coordinates = [(x, y) for x in range(map_size) for y in range(map_size)]

        # –ü–æ–∫–∞ —á—Ç–æ, –¥–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏, –∫–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è
        for i in coordinates:
            self.map_data[i] = None

        object_classes = {
            Tree: count_objects[0],
            Rock: count_objects[1],
            Grass: count_objects[2],
            Herbivore: count_objects[3],
            Predator: count_objects[4],
        }

        # –ü—Ä–∏–Ω–∏–º–∞—é –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (–ö–ª–∞—Å—Å-–ó–Ω–∞—á–µ–Ω–∏–µ)
        for object_type, count in object_classes.items():
            for _ in range(count):
                coord = random.choice(coordinates)

                # –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
                while self.map_data[coord] is not None:
                    coord = random.choice(coordinates)

                # —Å–æ–∑–¥–∞—é –æ–±—ä–µ–∫—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–µ—Ç–∫–µ
                self.map_data[coord] = object_type(x=coord[0], y=coord[1])

                # –∏ —É–±–∏—Ä–∞—é —ç—Ç—É –∫–ª–µ—Ç–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
                coordinates.remove(coord)


    def __get_cell_color(self, x: int, y: int):
        """ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–ª–µ—Ç–∫–∏ (–¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è) """
        if (x + y) % 2 == 0:
            return GRAY
        else:
            return DARK_GRAY


    def __draw_board(self, map_size: int):
        """ –í—ã–≤–æ–¥–∏—Ç –¥–æ—Å–∫—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞ –Ω–µ–π """


    def __count_random(self, map_size: int):
        """ –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"""
        total = map_size**2 // 3

        total_trees = total // 5
        total_stones = total // 5
        total_grasses = total // 5
        total_herbivores = total // 5
        total_predators = total // 5

        return [total_trees, total_stones, total_grasses, total_herbivores, total_predators]


    def show_board(self):
        print(self.map_data)


    def start(self, map_size):
        count_objects = self.__count_random(map_size)
        self.map_data_information(map_size, count_objects)
        self.__draw_board(map_size)
        self.show_board()